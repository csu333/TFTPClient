
// Content is generated by Claude Sonnet 4: https://claude.ai/public/artifacts/16dd5d2d-6350-4134-9b56-3ce67295df78

#ifndef TFTP_CLIENT_H
#define TFTP_CLIENT_H

#include <Arduino.h>
#include <WiFiUdp.h>
#include <IPAddress.h>
#include <WiFi.h>

// TFTP Opcodes
#define TFTP_RRQ    1   // Read request
#define TFTP_WRQ    2   // Write request
#define TFTP_DATA   3   // Data packet
#define TFTP_ACK    4   // Acknowledgment
#define TFTP_ERROR  5   // Error packet

// TFTP Error Codes
#define TFTP_ERR_NOT_DEFINED        0
#define TFTP_ERR_FILE_NOT_FOUND     1
#define TFTP_ERR_ACCESS_VIOLATION   2
#define TFTP_ERR_DISK_FULL          3
#define TFTP_ERR_ILLEGAL_OPERATION  4
#define TFTP_ERR_UNKNOWN_TID        5
#define TFTP_ERR_FILE_EXISTS        6
#define TFTP_ERR_NO_SUCH_USER       7

// Configuration
#define TFTP_DEFAULT_PORT       69
#define TFTP_DATA_SIZE          512
#define TFTP_PACKET_MAX_SIZE    516  // 512 data + 4 header
#define TFTP_TIMEOUT_MS         5000
#define TFTP_MAX_RETRIES        3

class TFTPClient : Stream {
public:
    // Constructor
    TFTPClient();
    
    // Destructor
    ~TFTPClient();
    
    // Initialize the TFTP client
    bool initialize();
    
    // Download a file from TFTP server
    bool downloadFile(IPAddress serverIP, const char* filename, uint8_t* buffer, size_t bufferSize);
    bool downloadFile(const char* serverHost, const char* filename, uint8_t* buffer, size_t bufferSize);

    // Download file with callback for progress updates
    typedef void (*ProgressCallback)(uint8_t* buffer, size_t bytesReceived);
    bool downloadFileWithProgress(const char* serverHost, const char* filename, ProgressCallback callback = nullptr);
    bool downloadFileWithProgress(IPAddress serverIP, const char* filename, ProgressCallback callback = nullptr);
    
    // Active download management methods
    int available() override;
    bool beginDownload(IPAddress serverIP, const char* filename);
    bool beginDownload(const char* serverHost, const char* filename);
    int readBlock(uint8_t* buffer, size_t bufferSize);

    bool endDownload();

    bool isDownloadActive();
    bool isDownloadComplete();
    uint16_t getCurrentBlockNumber();
    size_t getTotalBytesReceived();
    
    // Upload management methods
    bool beginUpload(IPAddress serverIP, const char* filename);
    bool beginUpload(const char* serverHost, const char* filename);
    int writeBlock(const uint8_t* data, size_t dataSize);
    bool endUpload();

    bool isUploadActive();
    uint16_t getCurrentUploadBlockNumber();
    size_t getTotalBytesSent();

    // Stream method
    int peek() override;
    int read() override;
    size_t readBytes(char *buffer, size_t length) override;
    size_t write(const uint8_t * buffer, size_t size) override;
    size_t write(uint8_t c) override;
    void flush() override;

    // Set maximum retries
    void setMaxRetries(int retries);
    
    // Get last error code and message
    int getLastErrorCode();
    const char* getLastErrorMessage();
    
    // Stop the client
    void stop();

private:
    WiFiUDP _udp;
    int _maxRetries;
    int _lastErrorCode;
    char _lastErrorMessage[64];
    bool _initialized;
    
    // Download state
    bool _downloadActive;
    IPAddress _serverIP;
    uint16_t _serverPort;
    uint16_t _expectedBlock;
    size_t _totalBytesReceived;
    bool _downloadComplete;
    uint8_t _readBuffer[TFTP_DATA_SIZE];
    int16_t _readBufferIndex;
    
    // Upload state
    bool _uploadActive;
    IPAddress _uploadServerIP;
    uint16_t _uploadServerPort;
    uint16_t _nextUploadBlock;
    size_t _totalBytesSent;
    bool _uploadComplete;
    uint8_t _writeBuffer[TFTP_DATA_SIZE];
    size_t _writeBufferIndex;

    // Internal methods
    bool sendReadRequest(IPAddress serverIP, uint16_t port, const char* filename);
    bool sendWriteRequest(IPAddress serverIP, uint16_t port, const char* filename);
    bool receivePacket(uint8_t* buffer, size_t& packetSize, IPAddress& fromIP, uint16_t& fromPort, unsigned long timeout);
    bool sendAck(IPAddress serverIP, uint16_t port, uint16_t blockNumber);
    bool sendDataPacket(IPAddress serverIP, uint16_t port, uint16_t blockNumber, const uint8_t* data, size_t dataSize);

    void setError(int errorCode, const char* message);

    uint16_t getUint16(const uint8_t* data);
    void setUint16(uint8_t* data, uint16_t value);
    bool resolveHostname(const char* hostname, IPAddress& ip);
    void resetDownloadState(bool keepStats = false);
    void resetUploadState();
};

#endif
